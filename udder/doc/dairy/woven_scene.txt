Scene: Woven ("Luminescence" archways at the Boulder Dairy)
===========================================================

Cue 0: Blackout
---------------
All other active layers fade to black.

Cue 1: Curtain
--------------
Fade in faint background color.
To fade out slowly through the following cue.

Cue 2: Warp
-----------
Monochromatic vertical stripes fill from right to left of the figure.
Between each stripe is a gap where the background shows through.
Background fades out.
(Bonus points: variegated warp. Low priority.)
(Bonus points: cursor draws attention to active sites in the fill.)

Cue 3: Weft
-----------
Monochromatic horizontal sawtooth ping-pong fill from the bottom to top of the figure.
The scan pattern starts from the lower right corner.
Max (or add?) blend of warp + weft layers.
Between each hotspot is a gap where the warp shows through.
(Bonus points: cursor continues to draw attention to activity in the fill.)

Cue 4: Finale
-------------
Visually punctuate the completion of the figure (to taste).

perhaps transform the mapping on an LFO -- rotate and scale on a sine
lfo whose frequency is modulated by a second sine lfo?
ooze into the finale, maybe getting brightness from the scaling (=more pixels), maybe modulating brightness as well?

stretch out the end somehow

fast fade out while going back to highrez map?

crossfade pseudo-sigmoidal:0.5*(1 + (sin((pi*(x-0.5)))))

sin(x**2) accelerates smoothly from slow to fast oscillation

this function (for details, solve "sin(x**2)=1" in wolframalpha) gives
you the float x where peak number c+1 is, e.g. c=4 returns the 5th peak:

  def peak(c):
     return (2*pi*c + pi*0.5)**0.5

This starts at maximum (1.0), dips down slowly halfway, dips up symmetrically to
1.0, then starts accelerating over a sine. Results scaled and translated to
[0.1..1.0]:

     0.5 + 0.5*sin((x - 1.2533141373155001)**2) from 0 to 20
     (try it in Alpha)
     note: 1.2533... is the value of peak(0)

In this case, peak(c) needs to change:

  def peak2a(c):
     return 1.2533141373155001 + (2*pi*(c) + pi*0.5)**0.5

a.k.a.

  def peak2b(c):
     return 1.2533141373155001 + peak(c)

peak2b(3) returns the 4th peak, counting from 0 at x=0.0, in the
scaled and translated version of this function.


Fade to black.

Cue 5: Return to default state
------------------------------
All other active layers fade in. (See Cue 0.)

Notes
-----
Stripe frequency and proportional foreground/background widths variable.
Warp and weft colors variable.
Horizontal and vertical fill timing variable.
Possibly ease the fade-in of each stripe or ping-pong hotspot.
Fade-in and fade-out timing variable.
Render as if the figure is rectilinear, BUT
Possibly do gate 1 first, then gate 2.
Offer a linear distortion of a 4-point control polygon so that they can shrink-to-fit onsite.
Possibly expand the distortion control polygon into an 8-point control cube.
Alternately implement as a composite of three rendered microrasters:
    background: 1 pixel
  + warp: a scanline of a*b*n pixels, where
      n is the number of warp stripes to fit into the figure
      a is the proportion of warp stripe width
      b is the proportion of black bg between stripes
  + weft as a 2abn raster like warp, where
      column[0] is the idealized left edge, and
      column[1] is the idealized right edge
  + tbd optional cursor implmentation, which might be incorporated into the above layers.
...and then in either case map Devices onto those scanlines by interpolating
	into the highrez model pixels from the lowrez buffers, poss. with
	oversampling/antialiasing.
